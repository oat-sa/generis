<?xml version="1.0"?>
<ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

    <!--
      Complexity is determined by the number of decision points in a method plus one
      for the method entry. The decision points are 'if', 'while', 'for', and
      'case labels'. Generally, 1-4 is low complexity, 5-7 indicates moderate
      complexity, 8-10 is high complexity, and 11+ is very high complexity.
    -->
    <rule ref="rulesets/codesize.xml/CyclomaticComplexity">
        <properties>
            <!-- The Cyclomatic Complexity reporting threshold -->
            <property name="reportLevel" value="8" />
        </properties>-->
    </rule>

    <!-- The NPath complexity of a method is the number of acyclic execution paths
         through that method. A threshold of 200 is generally considered the point
         where measures should be taken to reduce complexity. -->
    <rule ref="rulesets/codesize.xml/NPathComplexity"/>

    <!-- Violations of this rule usually indicate that the method is doing too much.
         Try to reduce the method size by creating helper methods and removing any
         copy/pasted code. -->
    <rule ref="rulesets/codesize.xml/ExcessiveMethodLength"/>

    <!-- Long Class files are indications that the class may be trying to do too
         much. Try to break it down, and reduce the size to something manageable. -->
    <rule ref="rulesets/codesize.xml/ExcessiveClassLength"/>

    <!-- Long parameter lists can indicate that a new object should be created to wrap
         the numerous parameters. Basically, try to group the parameters together. -->
    <rule ref="rulesets/codesize.xml/ExcessiveParameterList"/>

    <!-- A large number of public methods and attributes declared in a class can
         indicate the class may need to be broken up as increased effort will be
         required to thoroughly test it. -->
    <rule ref="rulesets/codesize.xml/ExcessivePublicCount"/>

    <!-- Classes that have too many fields could be redesigned to have fewer fields,
         possibly through some nested object grouping of some information. -->
    <rule ref="rulesets/codesize.xml/TooManyFields"/>

    <!-- A class with too many methods is probably a good suspect for refactoring, in
         order to reduce its complexity and find a way to have more fine-grained
         objects. By default, it ignores methods starting with 'get' or 'set'. -->
    <rule ref="rulesets/codesize.xml/TooManyMethods"/>

    <!-- A class with too many public methods is probably a good suspect for
         refactoring, in order to reduce its complexity and find a way to have more
         fine-grained objects. By default, it ignores methods starting with 'get' or
         'set'. -->
    <rule ref="rulesets/codesize.xml/TooManyPublicMethods"/>

    <!-- The Weighted Method Count (WMC) of a class is a good indicator of how much
         time and effort is required to modify and maintain this class. The WMC
         metric is defined as the sum of complexities of all methods declared in a
         class. A large number of methods also means that this class has a greater
         potential impact on derived classes. -->
    <rule ref="rulesets/codesize.xml/ExcessiveClassComplexity"/>
</ruleset>
